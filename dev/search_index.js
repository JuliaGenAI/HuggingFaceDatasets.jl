var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Pages   = [\"api.md\"]","category":"page"},{"location":"api/#Docs","page":"API","title":"Docs","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [HuggingFaceDatasets]","category":"page"},{"location":"api/#HuggingFaceDatasets.Dataset","page":"API","title":"HuggingFaceDatasets.Dataset","text":"Dataset\n\nA Julia wrapper around an object of the python datasets.Dataset class.\n\nProvides: \n\n1-based indexing.\nAll python class' methods from  datasets.Dataset.\n\nSee also load_dataset and DatasetDict.\n\n\n\n\n\n","category":"type"},{"location":"api/#HuggingFaceDatasets.DatasetDict","page":"API","title":"HuggingFaceDatasets.DatasetDict","text":"DatasetDict(pydatasetdict::Py; transform = identity)\n\nA DatasetDict is a dictionary of Datasets.  It is a wrapper around a datasets.DatasetDict object.\n\nThe transform is applied to each Dataset.  The py2jl transform provided by this package converts python types to julia types.\n\nSee also load_dataset and Dataset.\n\n\n\n\n\n","category":"type"},{"location":"api/#HuggingFaceDatasets.load_dataset-Tuple","page":"API","title":"HuggingFaceDatasets.load_dataset","text":"load_dataset(args...; transform=py2jl, kws...)\n\nLoad a dataset from the HuggingFace Datasets library.\n\nAll arguments are passed to the python function datasets.load_dataset. See the documentation here.\n\nExamples\n\njulia> d = load_dataset(\"glue\", \"sst2\")\nDatasetDict(<py DatasetDict({\n    train: Dataset({\n        features: ['sentence', 'label', 'idx'],\n        num_rows: 67349\n    })\n    validation: Dataset({\n        features: ['sentence', 'label', 'idx'],\n        num_rows: 872\n    })\n    test: Dataset({\n        features: ['sentence', 'label', 'idx'],\n        num_rows: 1821\n    })\n})>, HuggingFaceDatasets.py2jl)\n\njulia> d[\"train\"]\nDataset(<py Dataset({\n    features: ['sentence', 'label', 'idx'],\n    num_rows: 67349\n})>, HuggingFaceDatasets.py2jl)\n\nmnist = load_dataset(\"mnist\", split=\"train\")\n\njulia> mnist = load_dataset(\"mnist\", split=\"train\")\nDataset(<py Dataset({\n    features: ['image', 'label'],\n    num_rows: 60000\n})>, HuggingFaceDatasets.py2jl)\n\njulia> mnist[1]\nDict{String, Any} with 2 entries:\n  \"label\" => 5\n  \"image\" => UInt8[0x00 0x00 … 0x00 0x00; 0x00 0x00 … 0x00 0x00; … ; 0x00 0x00 … 0x00 0x00; 0x00 0x00 … 0x00 0x00]\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.numpy2jl-Tuple{PythonCall.Py}","page":"API","title":"HuggingFaceDatasets.numpy2jl","text":"numpy2jl(x)\n\nConvert a numpy array to a Julia array using DLPack. The conversion is copyless, and mutations to the Julia array are reflected in the numpy array.\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.py2jl","page":"API","title":"HuggingFaceDatasets.py2jl","text":"py2jl(x)\n\nConvert Python types to Julia types applying pyconvert recursively.\n\n\n\n\n\n","category":"function"},{"location":"api/#HuggingFaceDatasets.set_format!-Tuple{Dataset, Any}","page":"API","title":"HuggingFaceDatasets.set_format!","text":"set_format!(ds::Dataset, format)\n\nSet the format of ds to format. Mutating version of with_format.\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.set_format!-Tuple{DatasetDict, Any}","page":"API","title":"HuggingFaceDatasets.set_format!","text":"set_format!(d::DatasetDict, format)\n\nSet the format of d to format. Mutating version of with_format.\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.set_jltransform!-Tuple{Dataset, Any}","page":"API","title":"HuggingFaceDatasets.set_jltransform!","text":"set_jltransform!(ds::Dataset, transform)\nset_jltransform!(transform, ds::Dataset)\n\nSet the julia transform of ds to transform. Mutating version of with_jltransform.\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.set_jltransform!-Tuple{DatasetDict, Any}","page":"API","title":"HuggingFaceDatasets.set_jltransform!","text":"set_jltransform!(d::DatasetDict, transform)\nset_jltransform!(transform, d::DatasetDict)\n\nSet the transform of d to transform. Mutating  version of with_jltransform.\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.with_format-Tuple{Dataset, AbstractString}","page":"API","title":"HuggingFaceDatasets.with_format","text":"with_format(ds::Dataset, format)\n\nReturn a copy of ds with the format set to format. If format is \"julia\", the returned dataset will be transformed with py2jl and copyless conversion from python types  will be used when possible.\n\nSee also set_format!.\n\nExamples\n\njulia> ds = load_dataset(\"mnist\", split=\"test\");\n\njulia> ds[1]\nPython dict: {'image': <PIL.PngImagePlugin.PngImageFile image mode=L size=28x28 at 0x2B5B4C1F0>, 'label': 7}\n\njulia> ds = with_format(ds, \"julia\");\n\njulia> ds[1]\nDict{String, Any} with 2 entries:\n  \"label\" => 7\n  \"image\" => UInt8[0x00 0x00 … 0x00 0x00; 0x00 0x00 … 0x00 0x00; … ; 0x00 0x00 … 0x00 0x00; 0x00 0x00 … 0x00 0x00]\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.with_format-Tuple{DatasetDict, Any}","page":"API","title":"HuggingFaceDatasets.with_format","text":"with_format(d::DatasetDict, format)\n\nReturn a copy of d with the format set to format. If format is \"julia\", the returned dataset will be transformed with py2jl and copyless conversion from python types will be used when possible.\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.with_jltransform-Tuple{Dataset, Any}","page":"API","title":"HuggingFaceDatasets.with_jltransform","text":"with_jltransform(ds::Dataset, transform)\nwith_jltransform(transform, ds::Dataset)\n\nReturn a copy of ds with the julia transform set to transform. The transform applies when indexing, e.g. ds[1] or ds[1:2].\n\nThe transform is always applied to a batch of data, even if the index is a single integer. That is, ds[1] is equivalent to ds[1:1] from the point of view of the transform.\n\nThe julia transform is applied after the python transform (if any).  The python transform can be set with ds.set_transform(pytransform).\n\nIf transform is nothing or identity, the returned dataset will not be transformed.\n\nSee also set_jltransform! for the mutating version.\n\n\n\n\n\n","category":"method"},{"location":"api/#HuggingFaceDatasets.with_jltransform-Tuple{DatasetDict, Any}","page":"API","title":"HuggingFaceDatasets.with_jltransform","text":"\"     withjltransform(d::DatasetDict, transform)     withjltransform(transform, d::DatasetDict)\n\nReturn a copy of d with the julia transform applied to each Dataset.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HuggingFaceDatasets","category":"page"},{"location":"#HuggingFaceDatasets","page":"Home","title":"HuggingFaceDatasets","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for HuggingFaceDatasets.","category":"page"},{"location":"","page":"Home","title":"Home","text":"HuggingFaceDatasets.jl is a non-official julia wrapper around the python package  datasets from Hugging Face. datasets contains a large collection of machine learning datasets (see here for a list) that this package makes available to the julia ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is built on top of PythonCall.jl.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HuggingFaceDatasets.jl is a registered Julia package. You can easily install it through the package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add HuggingFaceDatasets","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HuggingFaceDatasets.jl provides wrappers around types from the datasets python package (e.g. Dataset and DatasetDict) along with a few related methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check out the examples/ folder for usage examples.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> train_data = load_dataset(\"mnist\", split = \"train\")\nDataset(<py Dataset({\n    features: ['image', 'label'],\n    num_rows: 60000\n})>, identity)\n\n# Indexing starts with 1. \n# By defaul, python types are returned.\njulia> train_data[1]\nPython dict: {'image': <PIL.PngImagePlugin.PngImageFile image mode=L size=28x28 at 0x2B64E2E90>, 'label': 5}\n\njulia> set_format!(train_data, \"julia\")\nDataset(<py Dataset({\n    features: ['image', 'label'],\n    num_rows: 60000\n})>, HuggingFaceDatasets.py2jl)\n\n# Now we have julia types\njulia> train_data[1]\nDict{String, Any} with 2 entries:\n  \"label\" => 5\n  \"image\" => UInt8[0x00 0x00 … 0x00 0x00; 0x00 0x00 … 0x00 0x00; … ; 0x00 0x00 … 0x00 0x00; 0x00 0x00 … 0x00 0x00]","category":"page"}]
}
